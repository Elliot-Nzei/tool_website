## ✅ FULL PLAN: Dynamic Chart Implementation with Chart.js

---

### 📌 OBJECTIVES

| Visualization       | Type      | Purpose                               |
| ------------------- | --------- | ------------------------------------- |
| Spending Categories | Pie Chart | Show expense distribution by category |
| Income vs. Expenses | Bar Chart | Compare total income and spending     |

---

## 🧱 FOLDER STRUCTURE (Front + Back)

```
project-root/
├── backend/
│   ├── main.py
│   ├── models.py
│   └── utils/finance.py
├── frontend/
│   ├── assets/
│   │   ├── css/
│   │   │   └── style.css
│   │   └── js/
│   │       └── script.js  ⟵ Chart logic goes here
│   └── pages/
│       └── finance.html  ⟵ Canvas containers added here
```

---

## 🖼️ `finance.html` — Chart Containers + CDN

Place this in the section where summaries are rendered.

```html
<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Financial Summary Section -->
<section class="financial-summary">
  <h2>💸 Monthly Financial Summary</h2>

  <!-- Canvas for Spending Breakdown -->
  <div class="chart-box">
    <h3>Spending Categories</h3>
    <canvas id="spendingChart"></canvas>
  </div>

  <!-- Canvas for Income vs Expenses -->
  <div class="chart-box">
    <h3>Income vs Expenses</h3>
    <canvas id="incomeExpenseChart"></canvas>
  </div>
</section>
```

---

## 🎨 `style.css` — Optional Chart Styling

```css
.chart-box {
  margin: 2rem auto;
  max-width: 600px;
  background: var(--color-card);
  padding: 1rem;
  border-radius: 12px;
}
```

---

## ⚙️ `script.js` — Chart Rendering Logic

```js
// Render Spending Categories as Pie Chart
function renderSpendingChart(spendingData) {
  const ctx = document.getElementById('spendingChart').getContext('2d');
  new Chart(ctx, {
    type: 'pie',
    data: {
      labels: Object.keys(spendingData),
      datasets: [{
        data: Object.values(spendingData),
        backgroundColor: [
          '#ff6384', '#36a2eb', '#cc65fe', '#ffce56', '#009688', '#795548'
        ],
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { position: 'bottom' },
        tooltip: { callbacks: { label: (ctx) => `₦${ctx.raw.toLocaleString()}` } }
      }
    }
  });
}

// Render Income vs Expenses Bar Chart
function renderIncomeVsExpenseChart(income, expense) {
  const ctx = document.getElementById('incomeExpenseChart').getContext('2d');
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Income', 'Expenses'],
      datasets: [{
        label: 'Amount',
        data: [income, expense],
        backgroundColor: ['#4caf50', '#f44336']
      }]
    },
    options: {
      scales: {
        y: { beginAtZero: true }
      },
      plugins: {
        legend: { display: false },
        tooltip: { callbacks: { label: (ctx) => `₦${ctx.raw.toLocaleString()}` } }
      }
    }
  });
}
```

---

## 🔗 Integrating With API Response

After POSTing the CSV and receiving response in JS:

```js
// After fetch('/analyze') success
fetch('/analyze', { method: 'POST', body: formData })
  .then(res => res.json())
  .then(data => {
    renderSpendingChart(data.spending_breakdown);
    renderIncomeVsExpenseChart(data.total_income, data.total_expense);
    populateBreakdown(data); // reuse previous logic
  });
```

---

## ✅ PYTHON BACKEND (No changes needed)

If you followed the previous `analyze_bank_statement()` plan and added:

```python
"spending_breakdown": {
  "Rent": 75000.0,
  "Airtime": 10000.0,
  "Bills": 4000.0,
}
```

…it’s **already compatible** with Chart.js logic above.

---

## 🧪 SAMPLE DATA FLOW

```json
{
  "total_income": 300000,
  "total_expense": 215000,
  "spending_breakdown": {
    "Rent": 75000,
    "Airtime": 10000,
    "Bills": 4000,
    "Mobile Data": 2000
  }
}
```

✅ JS will render:

* Pie chart with Rent, Airtime, Bills, Data
* Bar chart: ₦300k vs ₦215k

---

## ✅ WHAT YOU NOW HAVE

| Feature                            | Status |
| ---------------------------------- | ------ |
| Chart.js Integrated                | ✅      |
| Category Breakdown (Pie)           | ✅      |
| Income vs Expense Comparison (Bar) | ✅      |
| Data pulled from Python API        | ✅      |
| Responsive Charts                  | ✅      |

---

## 🔄 NEXT OPTIONAL ENHANCEMENTS

1. 🔧 Save charts as downloadable images (`chart.toBase64Image()`)
2. 📈 Add date filters (Last 30 days, 90 days)
3. 📂 Generate a **PDF report** with summary + charts
4. 🧠 Let users customize categories manually

---

Brilliant move. Let’s **fully integrate** the next level features:

---

# ✅ Phase 2: Final Enhancements (Charts + Export + Filters)

---

## ✅ 1. 📅 **Date Range Filtering Logic**

This allows users to select a date range and dynamically filter financial data for that period.

### 🧩 HTML Input (Place in `finance.html`)

```html
<section class="filter-section">
  <label for="startDate">Start Date:</label>
  <input type="date" id="startDate" />

  <label for="endDate">End Date:</label>
  <input type="date" id="endDate" />

  <button id="filterBtn">Apply Filter</button>
</section>
```

### ⚙️ `script.js` Logic

```js
document.getElementById('filterBtn').onclick = () => {
  const start = document.getElementById('startDate').value;
  const end = document.getElementById('endDate').value;

  const formData = new FormData();
  formData.append('file', uploadedFile); // from your file input
  formData.append('start_date', start);
  formData.append('end_date', end);

  fetch('http://localhost:8000/analyze', {
    method: 'POST',
    body: formData
  })
    .then(res => res.json())
    .then(data => {
      renderSpendingChart(data.spending_breakdown);
      renderIncomeVsExpenseChart(data.total_income, data.total_expense);
    });
};
```

### 🔧 Python Backend (`main.py`)

Add query support:

```python
from fastapi import Form
from datetime import datetime

@app.post("/analyze", response_model=FinancialSummary)
async def upload_and_analyze(
    file: UploadFile = File(...),
    start_date: str = Form(default=None),
    end_date: str = Form(default=None)
):
    file_path = f"{UPLOAD_DIR}/{file.filename}"
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # Convert dates
    start = datetime.strptime(start_date, "%Y-%m-%d") if start_date else None
    end = datetime.strptime(end_date, "%Y-%m-%d") if end_date else None

    result = analyze_bank_statement(file_path, start, end)
    return result
```

Update `analyze_bank_statement()` in `finance.py` to filter the date range:

```python
def analyze_bank_statement(file_path: str, start: datetime = None, end: datetime = None) -> FinancialSummary:
    df = pd.read_csv(file_path)
    df['date'] = pd.to_datetime(df['date'])
    
    # Filter by range if provided
    if start:
        df = df[df['date'] >= start]
    if end:
        df = df[df['date'] <= end]

    # Continue as before...
```

---

## ✅ 2. 🌓 Dark Mode Chart Theming

Use CSS variables + JS sync.

### 🧩 CSS Variables

```css
:root {
  --color-bg: #ffffff;
  --color-text: #000000;
  --color-accent: #4caf50;
}

body.dark-mode {
  --color-bg: #121212;
  --color-text: #ffffff;
  --color-accent: #ff5722;
}
```

### ⚙️ Update `script.js` chart logic:

```js
function getThemeColors() {
  const isDark = document.body.classList.contains('dark-mode');
  return isDark
    ? ['#ff5722', '#03a9f4', '#ffeb3b', '#8bc34a', '#ff9800']
    : ['#4caf50', '#2196f3', '#ffc107', '#9c27b0', '#e91e63'];
}
```

Then pass into chart setup:

```js
backgroundColor: getThemeColors()
```

Also re-render on theme toggle:

```js
document.getElementById("darkToggle").onclick = () => {
  document.body.classList.toggle("dark-mode");
  rerenderAllCharts(); // custom function to redraw
};
```

---

## ✅ 3. 🧾 Export to PDF with `jsPDF`

### 🧩 HTML Button

```html
<button id="exportPDF">📄 Export Report</button>
```

### 🔗 Add jsPDF via CDN

```html
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
```

### ⚙️ JS Logic

```js
document.getElementById('exportPDF').onclick = () => {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();

  doc.setFontSize(16);
  doc.text("💼 Financial Summary Report", 20, 20);

  doc.setFontSize(12);
  doc.text(`Total Income: ₦${lastData.total_income.toLocaleString()}`, 20, 40);
  doc.text(`Total Expenses: ₦${lastData.total_expense.toLocaleString()}`, 20, 50);
  doc.text(`Net Savings: ₦${lastData.net_savings.toLocaleString()}`, 20, 60);

  doc.text("Top Spending Categories:", 20, 80);
  let y = 90;
  for (const [category, amount] of Object.entries(lastData.spending_breakdown)) {
    doc.text(`- ${category}: ₦${amount.toLocaleString()}`, 25, y);
    y += 10;
  }

  // Export as PDF
  doc.save("financial_report.pdf");
};
```

Use a `let lastData = {}` globally to store latest API result.

---

## ✅ Final Workflow Recap

| Feature           | ✅ Implemented |
| ----------------- | ------------- |
| 📊 Dynamic Charts | ✅             |
| 📅 Date Filtering | ✅             |
| 🌓 Dark Mode Sync | ✅             |
| 📄 PDF Export     | ✅             |

---

## 🧠 Next-Level Suggestions

* Add **multi-month graph** (line chart over time)
* Allow **CSV export** of filtered data
* Include **user remarks or annotations** before exporting

